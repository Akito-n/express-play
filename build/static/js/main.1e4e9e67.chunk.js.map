{"version":3,"sources":["components/newPersonFrom.jsx","components/searchPerson.tsx","components/Persons.tsx","service/person.ts","App.js","serviceWorker.js","index.js"],"names":["NewPersonForm","props","onSubmit","handleSetPerson","value","newName","onChange","handleNmaeChange","newNomber","handleNumberChange","type","SearchPerson","searchWord","handleSearch","Persons","result","handleDestroy","map","person","index","key","name","number","onClick","id","baseUrl","axios","get","then","res","data","personObject","post","delete","App","useState","persons","setPersons","setNewName","setNewNomber","setSerchWord","useEffect","PersonService","initialPersons","filter","includes","e","console","log","target","event","preventDefault","window","alert","returnedUser","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e4e9e67.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewPersonForm = (props) => {\n  return (\n    <form onSubmit={props.handleSetPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNmaeChange} />\n      </div>\n      <div>\n        number: <input value={props.newNomber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewPersonForm;\n","import React from 'react';\n\nconst SearchPerson = ({ searchWord, handleSearch }: {searchWord: any, handleSearch: any }) => {\n  return (\n    <div>\n      <label>search</label>\n      <input value={searchWord} onChange={handleSearch} />\n    </div>\n  );\n};\n\nexport default SearchPerson;\n","import React from 'react';\n\n\nconst Persons = ({ result, handleDestroy }:any) => {\n  return (\n    <div>\n      {result.map((person: any, index: number) => (\n        <li key={index}>\n          {person.name} {person.number}<button onClick={() => handleDestroy(person.id)}>delete</button>\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\ninterface PersonProps {\n  name: string,\n  number: string,\n  id: number\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(res => res.data)\n}\n\n\nconst create = (personObject: PersonProps) => {\n  const request = axios.post(baseUrl, personObject)\n  return request.then(res => res.data)\n}\n\n\nconst update = (id: number, personObject: PersonProps) => {\n  const request = axios.post(`${baseUrl}/${id}`, personObject)\n  return request.then(res => res.data)\n}\n\nconst destroy = (id: number) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(res => res.data)\n}\n\n\nexport default {getAll, create, update, destroy}\n","import React, { useState, useEffect } from 'react';\nimport NewPersonForm from './components/newPersonFrom.jsx';\nimport SeachPerson from './components/searchPerson.tsx';\nimport Persons from './components/Persons.tsx';\nimport PersonService from './service/person.ts'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n  ]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNomber, setNewNomber ] = useState('');\n  const [ searchWord, setSerchWord ] = useState('');\n\n  const hook = () => {\n    PersonService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }\n\n  useEffect(hook, [])\n\n  const handleNmaeChange = (event) => {\n    console.log('change', event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    console.log('change', event.target.value);\n    setNewNomber(event.target.value);\n  };\n\n  const handleSearch = (e) => {\n    console.log(searchWord);\n    setSerchWord(e.target.value);\n  };\n\n  const result =\n    searchWord === ''\n      ? persons\n      : persons.filter((person) => {\n          return person.name.includes(searchWord);\n        });\n\n  const handleSetPerson = (event) => {\n    event.preventDefault();\n    const personNames = persons.map((person) => person.name);\n    if (personNames.includes(newName)) {\n      window.alert(`${newName} is already added to phonebook`);\n      return;\n    }\n\n    const newUser = {\n      name: newName,\n      number: newNomber\n    };\n    PersonService.create(newUser).then(returnedUser => setPersons(persons.concat(returnedUser)))\n    setNewName('');\n    setNewNomber('')\n  };\n\n  const handleDestroy = (id) => {\n      PersonService.destroy(id).then(() => {\n        setPersons(persons.filter((person) => person.id !== id))\n      })\n    }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SeachPerson handleSearch={handleSearch} searchWord={searchWord} />\n      <NewPersonForm\n        handleSetPerson={handleSetPerson}\n        newName={newName}\n        newNomber={newNomber}\n        handleNmaeChange={handleNmaeChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      ...\n      <Persons result={result} handleDestroy={handleDestroy} />\n      <div>\n        debug: <p>{searchWord}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const Button = ({ handleClick, text }) => {\n//   return <button onClick={handleClick}>{text}</button>;\n// };\n\n// const Result = ({ clickCount, good, bad, neutral }) => {\n//   if (clickCount !== 0) {\n//     return (\n//       <div>\n//         <p>good{good}</p> <p>neutral{neutral}</p> <p>bad{bad}</p>\n//       </div>\n//     );\n//   }\n//   return <div>No Result</div>;\n// };\n\n// const Average = ({ average }) => {\n//   if (average) {\n//   return <div>average {average}</div>\n//   }\n//   return <></>\n// };\n\n// const Positive = ({ positive }) => {\n//   if(positive) {\n//   return <div>{positive || 0}%</div>}\n//   return <></>\n// };\n\n// const App = (props) => {\n//   const [ good, setGood ] = useState(0);\n//   const [ neutral, setNeutral ] = useState(0);\n//   const [ bad, setBad ] = useState(0);\n//   const [ clickCount, setClickount ] = useState(0);\n\n//   const incrementGood = () => {\n//     setClickount(clickCount + 1);\n//     setGood(good + 1);\n//   };\n\n//   const incrementNeutral = () => {\n//     setClickount(clickCount + 1);\n//     setNeutral(neutral + 1);\n//   };\n//   const incrementBad = () => {\n//     setClickount(clickCount + 1);\n//     setBad(bad + 1);\n//   };\n\n//   const average = good - bad / clickCount;\n\n//   const positive = good / clickCount;\n//   return (\n//     <div>\n//       <h1>give feedback</h1>\n//       <Button handleClick={incrementGood} text=\"good\" />\n//       <Button handleClick={incrementNeutral} text=\"nutoral\" />\n//       <Button handleClick={incrementBad} text=\"bod\" />\n//       <Result good={good} bad={bad} neutral={neutral} clickCount={clickCount} />\n//       <Average average={average} />\n//       <Positive positive={positive} />\n//     </div>\n//   );\n// };\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}